version: '3.9'
services:
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres:14.9-alpine
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
      POSTGRES_DB: keycloak_service_v1
    ports:
      - "5439:5432"
    volumes:
      - postgres-keycloak-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 5s
      retries: 5

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:14.9-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: inventory_service_v1
    ports:
      - "5434:5432"
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 5s
      retries: 5

  postgres-user:
    container_name: postgres-user
    image: postgres:14.9-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: user_service_v1
    ports:
      - "5436:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.3
    command:
      - "start-dev"
      - "--features=preview"
      - "--import-realm"
    #      - "--features=token-exchange,declarative-user-profile"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak_service_v1
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: secret
      KC_DEBUG: true
      KC_DEBUG_PORT: "*:8787"
      KC_HTTP_PORT: 8090
      KC_HEALTH_ENABLED: true
      TZ: UTC
    ports:
      - "8090:8090"
      - "8787:8787"
    networks:
      - internal-network
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8090/health/live' ]
      interval: 15s
      timeout: 5s
      retries: 5

  zipkin:
    image: openzipkin/zipkin:2.24.3
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - internal-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - internal-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - internal-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_started

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    command:
      - "redis-server"
      - "--save 20 1"
      - "--loglevel warning"
    ports:
      - "6379:6379"
    networks:
      - internal-network
    volumes:
      - cache-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 15s
      timeout: 5s
      retries: 5

  discovery-service:
    container_name: discovery-service
    build:
      context: ../discovery-service-eric6166
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8761:8761"
    networks:
      - internal-network
    expose:
      - "8761"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      zipkin:
        condition: service_started

  gateway-service:
    container_name: gateway-service
    build:
      context: ../gateway-service-eric6166
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8181:8181"
    expose:
      - "8181"
    networks:
      - internal-network
    depends_on:
      discovery-service:
        condition: service_started
      keycloak:
        condition: service_healthy
      zipkin:
        condition: service_started


  inventory-service:
    container_name: inventory-service
    build:
      context: ../inventory-service-eric6166
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8083:8083"
    expose:
      - "8083"
    networks:
      - internal-network
    depends_on:
      postgres-inventory:
        condition: service_healthy
      discovery-service:
        condition: service_started
      gateway-service:
        condition: service_started
      keycloak:
        condition: service_healthy
      zipkin:
        condition: service_started
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
  #      activemq:
  #        condition: service_started

  user-service:
    container_name: user-service
    build:
      context: ../user-service-eric6166
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8086:8086"
    expose:
      - "8086"
    networks:
      - internal-network
    depends_on:
      postgres-user:
        condition: service_healthy
      discovery-service:
        condition: service_started
      gateway-service:
        condition: service_started
      keycloak:
        condition: service_healthy
      zipkin:
        condition: service_started
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
#      activemq:
#        condition: service_started

networks:
  internal-network:

volumes:
  postgres-keycloak-data:
  postgres-inventory-data:
  postgres-user-data:
  cache-data:
#  postgres-order-data:
#  postgres-payment-data:
#  activemq-data:
#  activemq-log:
